#!/bin/bash
#################
#		#
#	taur	#
#		#
#################
# bunch of scripts to cleanup after building packages from aur

NAME=$1
USER=`whoami`
WORKDIR=/home/$USER/Projects/packages
BUILDDIR=${WORKDIR}/build
ARCHIVEDIR=${WORKDIR}/archive
AURDIR=${WORKDIR}/aur
VAR=""

# check for user makepkg.conf and apply VARS
MAKEPKG=`find ~ -type f -name makepkg.conf`
if [ -z $MAKEPKG ]; then
	BUILDDIR=/tmp/makepkg;
else
	eval `grep BUILDDIR $MAKEPKG`;
	eval `grep PKGDEST $MAKEPKG`;
	ARCHIVEDIR=$PKGDEST/../archive;
fi
if [ ! -d $ARCHIVEDIR ]; then
	echo missing $ARCHIVEDIR;
	create $ARCHIVEDIR before calling again;
	exit 1
fi
##Colors
#Foreground
FBLK=`tput setaf 0`	#Black
FRED=`tput setaf 1`	#Red
FGRN=`tput setaf 2`	#Green
FYLW=`tput setaf 3`	#Yellow
FBLU=`tput setaf 4`	#Blue
FMGT=`tput setaf 5`	#Magenta
FCYN=`tput setaf 6`	#Cyan
FWHT=`tput setaf 7`	#White
#Background
BBLK=`tput setab 0`	#Black
BRED=`tput setab 1`	#Red
BGRN=`tput setab 2`	#Green
BYLW=`tput setab 3`	#Yellow
BBLU=`tput setab 4`	#BLue
BMGT=`tput setab 5`	#Magenta
BCYN=`tput setab 6`	#Cyan
BWHT=`tput setab 7`	#White
#Other
BLD=`tput bold`
RST=`tput sgr0`

##Functions
function func_getver() {
#f to get the (version) number
# func_getver epoch|verbld|pkgver|etcâ€¦
    TOGREP="$1"
    VAR=`grep -i "$TOGREP" -m 1 "$AURDIR"/"$NAME"/.SRCINFO | awk '{print $3}'`
    eval $1=\$VAR
}

function func_e() {
#function to output to standard out
#func_e TEXT
    echo -e $@
}

function func_tar() {
#function to create the archive
    TAROPTS=" -h --sort=name "
    TARSFFX="tar.xz"
    ARCHNAME=$NAME
    if [[ $EPOCH ]]; then
        VERSION="$EPOCH"_"$PKGVER"-"$PKGREL";
    else
	VERSION="$PKGVER"-"$PKGREL";
    fi
    func_e ${FGRN}${BLD}==\>${RST} creating Archive ${BLD}${NAME}-${VERSION}.${TARSFFX}${RST}
    cd $AURDIR
    tar -C $AURDIR -czf $NAME-$VERSION.$TARSFFX $TAROPTS $NAME
    mv $AURDIR/$NAME-$VERSION.$TARSFFX $ARCHIVEDIR/
}

#function to remove the directory
function func_rem() {
    RMOPTS="-Rf"
    if [ -d $BUILDDIR/$NAME ]; then
        TARGET=$BUILDDIR/$NAME;
        func_e ${FGRN}${BLD}==\>${RST} Removing ${BLD}$TARGET${RST};
        rm $RMOPTS $TARGET;
    fi
    if [ -d $AURDIR/$NAME ]; then
        TARGET=$AURDIR/$NAME;
        func_e ${FGRN}${BLD}==\>${RST} Removing ${BLD}$TARGET${RST};
        rm $RMOPTS $TARGET;
    fi
}

#check for empty call
if [ -z "$@" ]; then
    echo -e "${FRED}${BLD}::${RST}No target given${FRED}${BLD}::${RST}";
    exit 1;
fi
if [ -d "${AURDIR}/${NAME}" ]; then
   echo -e "Archiviere Verzeichnis ${FGRN}${BLD}$@${RST}.";
else
   echo -e "${FRED}${BLD}::${RST}${BLD}"$@"${RST} not found${FRED}${BLD}::${RST}"
   exit 1;
fi

func_getver PKGVER
func_getver PKGREL
func_getver EPOCH
func_tar
func_rem
